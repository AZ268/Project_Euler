# Problem 44
# Pentagon Numbers
# Pentagonal numbers are generated by the formula:
# P(n) = n(3n - 1)/2
# The pair of pentagonal numbers, P_j and P_k, are called pentagonal pair if their sum and difference are pentagonal.
#
# Find the pair of pentagonal numbers for which their difference D = [P_J - P_k] is minimized.
# Output that smallest difference D.

def pentagonal(n):
    """Return the nth pentagonal number."""
    return n * (3 * n - 1) // 2

def is_pentagonal(num):
    """Check if num is a pentagonal number using integer arithmetic."""
    y = 1 + 24 * num
    # Integer square root via binary search
    low, high = 0, y
    while low <= high:
        mid = (low + high) // 2
        sq = mid * mid
        if sq == y:
            return (1 + mid) % 6 == 0
        elif sq < y:
            low = mid + 1
        else:
            high = mid - 1
    return False

def find_smallest_difference(limit=5000):
    pents = [pentagonal(i) for i in range(1, limit + 1)]
    pent_set = set(pents)

    min_diff = None

    for j in range(1, limit):
        pj = pents[j]
        for k in range(j - 1, 0, -1):
            pk = pents[k]
            diff = pj - pk

            # Early exit if diff already exceeds known min
            if min_diff is not None and diff >= min_diff:
                break

            # Check both sum and diff in set
            if (pj + pk) in pent_set and diff in pent_set:
                min_diff = diff
                print("Found pair:", pj, pk, " Difference:", diff)
                return diff  # first found is minimal due to iteration order

    return min_diff

print(find_smallest_difference(6000))